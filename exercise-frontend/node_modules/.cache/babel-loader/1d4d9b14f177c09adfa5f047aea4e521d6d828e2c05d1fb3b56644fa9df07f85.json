{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\micha\\\\softwareprojects\\\\excercizer\\\\exercise-frontend\\\\src\\\\components\\\\ExerciseGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { Chart, TimeScale } from 'chart.js'; // Import Chart from chart.js\nimport 'chartjs-adapter-date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(TimeScale);\nfunction ExerciseGraph({\n  exerciseData\n}) {\n  _s();\n  const chartRef = useRef(null);\n  useEffect(() => {\n    // Extract labels (dates or timestamps) and volume values from exerciseData\n    const labels = exerciseData.map(exercise => exercise.date); // Update this to the actual date property\n    const volumes = exerciseData.map(exercise => exercise.volume);\n    const chartData = {\n      labels: labels,\n      datasets: [{\n        label: 'Exercise Volume',\n        data: volumes,\n        fill: false,\n        borderColor: 'rgba(75, 192, 192, 1)'\n      }]\n    };\n    const chartOptions = {\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        x: {\n          type: 'time',\n          // Use 'time' as the scale type\n          title: {\n            display: true,\n            text: 'Date'\n          }\n        },\n        y: {\n          beginAtZero: true,\n          title: {\n            display: true,\n            text: 'Volume'\n          }\n        }\n      }\n    };\n\n    // Check if the previous chart instance exists and destroy it\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n    try {\n      // Create a new chart instance and store it in the ref\n      const ctx = document.getElementById('myChart').getContext('2d');\n      chartRef.current = new Chart(ctx, {\n        type: 'line',\n        data: chartData,\n        options: chartOptions\n      });\n    } catch (error) {\n      console.error('Error creating chart:', error);\n      // Handle the chart creation error here\n    }\n  }, [exerciseData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Exercise Volume Over Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"myChart\",\n      width: 400,\n      height: 400\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(ExerciseGraph, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = ExerciseGraph;\nexport default ExerciseGraph;\nvar _c;\n$RefreshReg$(_c, \"ExerciseGraph\");","map":{"version":3,"names":["React","useRef","useEffect","Chart","TimeScale","jsxDEV","_jsxDEV","register","ExerciseGraph","exerciseData","_s","chartRef","labels","map","exercise","date","volumes","volume","chartData","datasets","label","data","fill","borderColor","chartOptions","responsive","maintainAspectRatio","scales","x","type","title","display","text","y","beginAtZero","current","destroy","ctx","document","getElementById","getContext","options","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","id","width","height","_c","$RefreshReg$"],"sources":["C:/Users/micha/softwareprojects/excercizer/exercise-frontend/src/components/ExerciseGraph.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport { Chart, TimeScale } from 'chart.js'; // Import Chart from chart.js\r\nimport 'chartjs-adapter-date-fns';\r\n\r\nChart.register(TimeScale);\r\n\r\nfunction ExerciseGraph({ exerciseData }) {\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Extract labels (dates or timestamps) and volume values from exerciseData\r\n    const labels = exerciseData.map((exercise) => exercise.date); // Update this to the actual date property\r\n    const volumes = exerciseData.map((exercise) => exercise.volume);\r\n\r\n    const chartData = {\r\n      labels: labels,\r\n      datasets: [\r\n        {\r\n          label: 'Exercise Volume',\r\n          data: volumes,\r\n          fill: false,\r\n          borderColor: 'rgba(75, 192, 192, 1)',\r\n        },\r\n      ],\r\n    };\r\n\r\n    const chartOptions = {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      scales: {\r\n        x: {\r\n          type: 'time', // Use 'time' as the scale type\r\n          title: {\r\n            display: true,\r\n            text: 'Date',\r\n          },\r\n        },\r\n        y: {\r\n          beginAtZero: true,\r\n          title: {\r\n            display: true,\r\n            text: 'Volume',\r\n          },\r\n        },\r\n      },\r\n    };\r\n\r\n    // Check if the previous chart instance exists and destroy it\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n\r\n    try {\r\n      // Create a new chart instance and store it in the ref\r\n      const ctx = document.getElementById('myChart').getContext('2d');\r\n      chartRef.current = new Chart(ctx, {\r\n      type: 'line',\r\n      data: chartData,\r\n      options: chartOptions,\r\n      });\r\n    } catch (error) {\r\n      console.error('Error creating chart:', error);\r\n      // Handle the chart creation error here\r\n    }\r\n  }, [exerciseData]);\r\n\r\n\r\n    \r\n\r\n\r\n  return (\r\n    <div>\r\n      <h3>Exercise Volume Over Time</h3>\r\n      <canvas id=\"myChart\" width={400} height={400}></canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExerciseGraph;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,SAASC,KAAK,EAAEC,SAAS,QAAQ,UAAU,CAAC,CAAC;AAC7C,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElCH,KAAK,CAACI,QAAQ,CAACH,SAAS,CAAC;AAEzB,SAASI,aAAaA,CAAC;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EACvC,MAAMC,QAAQ,GAAGV,MAAM,CAAC,IAAI,CAAC;EAE7BC,SAAS,CAAC,MAAM;IACd;IACA,MAAMU,MAAM,GAAGH,YAAY,CAACI,GAAG,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;IAC9D,MAAMC,OAAO,GAAGP,YAAY,CAACI,GAAG,CAAEC,QAAQ,IAAKA,QAAQ,CAACG,MAAM,CAAC;IAE/D,MAAMC,SAAS,GAAG;MAChBN,MAAM,EAAEA,MAAM;MACdO,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,iBAAiB;QACxBC,IAAI,EAAEL,OAAO;QACbM,IAAI,EAAE,KAAK;QACXC,WAAW,EAAE;MACf,CAAC;IAEL,CAAC;IAED,MAAMC,YAAY,GAAG;MACnBC,UAAU,EAAE,IAAI;MAChBC,mBAAmB,EAAE,KAAK;MAC1BC,MAAM,EAAE;QACNC,CAAC,EAAE;UACDC,IAAI,EAAE,MAAM;UAAE;UACdC,KAAK,EAAE;YACLC,OAAO,EAAE,IAAI;YACbC,IAAI,EAAE;UACR;QACF,CAAC;QACDC,CAAC,EAAE;UACDC,WAAW,EAAE,IAAI;UACjBJ,KAAK,EAAE;YACLC,OAAO,EAAE,IAAI;YACbC,IAAI,EAAE;UACR;QACF;MACF;IACF,CAAC;;IAED;IACA,IAAIrB,QAAQ,CAACwB,OAAO,EAAE;MACpBxB,QAAQ,CAACwB,OAAO,CAACC,OAAO,CAAC,CAAC;IAC5B;IAEA,IAAI;MACF;MACA,MAAMC,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAAC,SAAS,CAAC,CAACC,UAAU,CAAC,IAAI,CAAC;MAC/D7B,QAAQ,CAACwB,OAAO,GAAG,IAAIhC,KAAK,CAACkC,GAAG,EAAE;QAClCR,IAAI,EAAE,MAAM;QACZR,IAAI,EAAEH,SAAS;QACfuB,OAAO,EAAEjB;MACT,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C;IACF;EACF,CAAC,EAAE,CAACjC,YAAY,CAAC,CAAC;EAMlB,oBACEH,OAAA;IAAAsC,QAAA,gBACEtC,OAAA;MAAAsC,QAAA,EAAI;IAAyB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClC1C,OAAA;MAAQ2C,EAAE,EAAC,SAAS;MAACC,KAAK,EAAE,GAAI;MAACC,MAAM,EAAE;IAAI;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpD,CAAC;AAEV;AAACtC,EAAA,CAtEQF,aAAa;AAAA4C,EAAA,GAAb5C,aAAa;AAwEtB,eAAeA,aAAa;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}